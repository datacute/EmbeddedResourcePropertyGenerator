namespace Datacute.EmbeddedResourcePropertyGenerator
{
    internal static class Templates
    {
        private const string GeneratorNamespace = "Datacute.EmbeddedResourcePropertyGenerator";
        private const string AttributeName = "EmbeddedResourcePropertiesAttribute";
        public const string AttributeFullyQualified = GeneratorNamespace + "." + AttributeName;

        public const string AutoGeneratedComment = /* language=c# */
            @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
";

        public const string StartEmbeddedResourceClass = /* language=c# */
            @"    private static class EmbeddedResource
    {";

        public const string ReadMethod = /* language=c# */
            @"        public static string Read(string resourceName)
        {{
            var assembly = typeof({0}).Assembly;
            using var stream = assembly.GetManifestResourceStream(resourceName)!;
            using var streamReader = new global::System.IO.StreamReader(stream, global::System.Text.Encoding.UTF8);
            var resourceText = streamReader.ReadToEnd();
            return resourceText;
        }}
";

        public const string BackingFieldClass = /* language=c# */
            @"        public static class BackingField
        {";

        public const string BackingField = /* language=c# */
            @"            public static string? {0};
";

        public const string ResourceNameClass = /* language=c# */
            @"        public static class ResourceName
        {";

        public const string ResourceName = /* language=c# */
            @"            public const string {0} = ""{1}"";
";

        public const string ClassDocComments = /* language=c# */
            @"/// <summary>
/// This class's properties are generated from project files meeting the criteria:
/// <list type=""bullet"">
/// <item>
/// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>
/// </item>
/// <item>
/// <description>they are in the project folder <c>{0}</c></description>
/// </item>
/// <item>
/// <description>they have the extension <c>{1}</c></description>
/// </item>
/// </list>
/// </summary>
";

        public const string PartialMethods = /* language=c# */
            @"    static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);
    static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);";

        public const string PropertyTemplate = /* language=c# */
            @"
    /// <summary>Text value of the Embedded Resource: {1}</summary>
    /// <value>
    /// <code>{2}
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string {0}
    {{
        get
        {{
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.{0}, EmbeddedResource.ResourceName.{0}, ""{0}"");
            var value = EmbeddedResource.BackingField.{0} ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.{0});
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.{0}, ""{0}"");
            return value;
        }}
    }}
";

        public const string DesignTimePropertyTemplate = /* language=c# */
            @"        public static string {0} => ""Design Time"";
";

    }
}