namespace Datacute.EmbeddedResourcePropertyGenerator
{
    internal static class Templates
    {
        private const string GeneratorNamespace = "Datacute.EmbeddedResourcePropertyGenerator";
        public const string AttributeName = "EmbeddedResourcePropertiesAttribute";
        public const string AttributeFullyQualified = GeneratorNamespace + "." + AttributeName;

        public const string AttributeCs = /* language=c# */
            @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Datacute.EmbeddedResourcePropertyGenerator;

/// <summary>
/// Use a source generator to add properties to this class for each embedded resource file 
/// with a filename matching the given <see cref=""Extension""/>
/// found in the given <see cref=""Path""/>.
/// <para>
/// If the path starts with ""/"" it is relative to the project root,
/// otherwise it is relative to the folder containing the class with this attribute.
/// If the path is not specified, the class name is used.
/// </para>
/// </summary>
/// <remarks>
/// Source generators only have access to <c>AdditionalFiles</c>. All <c>EmbeddedResource</c> files can be automatically included as <c>AdditionalFiles</c> by including the following line in the project file:
/// <code>
/// &lt;ItemGroup&gt;
///     &lt;AdditionalFileItemNames&gt;$(AdditionalFileItemNames);EmbeddedResource&lt;/AdditionalFileItemNames&gt;
/// &lt;/ItemGroup&gt;
/// </code>
/// </remarks>
[global::System.Diagnostics.Conditional(""DATACUTE_EMBEDDEDRESOURCEPROPERTIES_USAGES"")]
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
internal sealed class EmbeddedResourcePropertiesAttribute : global::System.Attribute
{
    /// <value>The filename extension of the embedded resource files
    /// to include as properties, defaulting to "".txt"".</value>
    public string Extension { get; private set; }

    /// <value>The path of the directory of embedded resource files
    /// to include as properties.</value>
    /// <remarks>
    /// If the path starts with ""/"" it is treated as relative to the project root,
    /// otherwise it is relative to the folder containing the class with this attribute.
    /// If the path is not specified, the class name is used.
    /// </remarks>
    public string? Path { get; private set; }

    public EmbeddedResourcePropertiesAttribute(string extension = "".txt"", string? path = null)
    {
        Extension = extension;
        Path = path;
    }
}";

        public const string EmbeddedResourceReaderCs = /* language=c# */
            @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace Datacute.EmbeddedResourcePropertyGenerator;

public static class EmbeddedResourceReader
{
    public static string Read(Type containingType, string resourceName)
    {
        var assembly = containingType.Assembly;
        using var stream = assembly.GetManifestResourceStream(resourceName)!;
        using var streamReader = new global::System.IO.StreamReader(stream, global::System.Text.Encoding.UTF8);
        var resourceText = streamReader.ReadToEnd();
        return resourceText;
    }
}";

        public const string AutoGeneratedComment = /* language=c# */
            @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
";

        public const string ReadingMethods = /* language=c# */
            @"file static class ReadingMethods
{{
    public static string ReadEmbeddedResource(string resourceName)
    {{
        return global::Datacute.EmbeddedResourcePropertyGenerator.EmbeddedResourceReader.Read(typeof({0}), resourceName);
    }}
}}
";

        public const string BackingFields = /* language=c# */
            @"file static class BackingFields
{";

        public const string BackingField = /* language=c# */
            @"    public static string? {0};
";

        public const string ResourceNames = /* language=c# */
            @"file static class ResourceNames
{";

        public const string ResourceName = /* language=c# */
            @"    public const string {0} = ""{1}"";
";

        public const string ClassDocComments = /* language=c# */
            @"/// <summary>
/// This class's properties are generated from project files meeting the criteria:
/// <list type=""bullet"">
/// <item>
/// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>
/// </item>
/// <item>
/// <description>they are in the project folder <c>{0}</c></description>
/// </item>
/// <item>
/// <description>they have the extension <c>{1}</c></description>
/// </item>
/// </list>
/// </summary>
";

        public const string ReadEmbeddedResourceValueMethod = /* language=c# */
            @"    static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);
    static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);";

        public const string PropertyTemplate = /* language=c# */
            @"
    /// <summary>Text value of the Embedded Resource: {1}</summary>
    /// <value>
    /// <code>{2}
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string {0}
    {{
        get
        {{
            ReadEmbeddedResourceValue(ref BackingFields.{0}, ResourceNames.{0}, ""{0}"");
            var value = BackingFields.{0} ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.{0});
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames.{0}, ""{0}"");
            return value;
        }}
    }}
";

        public const string DesignTimePropertyTemplate = /* language=c# */
            @"        public static string {0} => ""Design Time"";
";

    }
}