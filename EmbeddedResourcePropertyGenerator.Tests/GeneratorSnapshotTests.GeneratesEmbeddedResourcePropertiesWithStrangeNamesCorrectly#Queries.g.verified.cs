//HintName: Queries.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

/// <summary>
/// This class's properties are generated from project files meeting the criteria:
/// <list type="bullet">
/// <item>
/// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>
/// </item>
/// <item>
/// <description>they are in the project folder <c>Queries</c></description>
/// </item>
/// <item>
/// <description>they have the extension <c>.txt</c></description>
/// </item>
/// </list>
/// </summary>
public static partial class Queries
{
    private static class EmbeddedResource
    {
        public static string Read(string resourceName)
        {
            var assembly = typeof(Queries).Assembly;
            using var stream = assembly.GetManifestResourceStream(resourceName)!;
            using var streamReader = new global::System.IO.StreamReader(stream, global::System.Text.Encoding.UTF8);
            var resourceText = streamReader.ReadToEnd();
            return resourceText;
        }
        public static class BackingField
        {
            public static string? _1example_open_1_close_;
            public static string? _1example_lt_1_gt_;
            public static string? Test;
            public static string? Test_;
            public static string? Queries_dot_txt;
            public static string? Queries_txt;
            public static string? _dot_txt;
            public static string? _txt;
            public static string? _u1F602_;
            public static string? _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_;
            public static string? _amp_amp_semi_;
        }
        public static class ResourceName
        {
            public const string _1example_open_1_close_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1example(1).txt";
            public const string _1example_lt_1_gt_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1example<1>.txt";
            public const string Test = "EmbeddedResourcePropertyGenerator.Tests.Queries.test.txt";
            public const string Test_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.Test.txt";
            public const string Queries_dot_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries.Queries.txt";
            public const string Queries_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries.Queries_txt.txt";
            public const string _dot_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries..txt";
            public const string _txt = "EmbeddedResourcePropertyGenerator.Tests.Queries._txt.txt";
            public const string _u1F602_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.😂.txt";
            public const string _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1(@#$)[.,] <:'|>.txt";
            public const string _amp_amp_semi_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.&amp;.txt";
        }
    }
    static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);
    static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);

    /// <summary>Text value of the Embedded Resource: 1example(1).txt</summary>
    /// <value>
    /// <code>
    /// Property names cannot start with a number nor contain special characters
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1example_open_1_close_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._1example_open_1_close_, EmbeddedResource.ResourceName._1example_open_1_close_, "_1example_open_1_close_");
            var value = EmbeddedResource.BackingField._1example_open_1_close_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._1example_open_1_close_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._1example_open_1_close_, "_1example_open_1_close_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 1example<1>.txt</summary>
    /// <value>
    /// <code>
    /// Replacing special characters with underscores can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1example_lt_1_gt_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._1example_lt_1_gt_, EmbeddedResource.ResourceName._1example_lt_1_gt_, "_1example_lt_1_gt_");
            var value = EmbeddedResource.BackingField._1example_lt_1_gt_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._1example_lt_1_gt_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._1example_lt_1_gt_, "_1example_lt_1_gt_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: test.txt</summary>
    /// <value>
    /// <code>
    /// Property names are camel-cased, so this should be Test
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Test
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Test, EmbeddedResource.ResourceName.Test, "Test");
            var value = EmbeddedResource.BackingField.Test ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Test);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Test, "Test");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Test.txt</summary>
    /// <value>
    /// <code>
    /// Upper-casing the first letter can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Test_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Test_, EmbeddedResource.ResourceName.Test_, "Test_");
            var value = EmbeddedResource.BackingField.Test_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Test_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Test_, "Test_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Queries.txt</summary>
    /// <value>
    /// <code>
    /// Member names cannot be the same as their enclosing type
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Queries_dot_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Queries_dot_txt, EmbeddedResource.ResourceName.Queries_dot_txt, "Queries_dot_txt");
            var value = EmbeddedResource.BackingField.Queries_dot_txt ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Queries_dot_txt);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Queries_dot_txt, "Queries_dot_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Queries_txt.txt</summary>
    /// <value>
    /// <code>
    /// Using the full filename can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Queries_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField.Queries_txt, EmbeddedResource.ResourceName.Queries_txt, "Queries_txt");
            var value = EmbeddedResource.BackingField.Queries_txt ??= EmbeddedResource.Read(EmbeddedResource.ResourceName.Queries_txt);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName.Queries_txt, "Queries_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: .txt</summary>
    /// <value>
    /// <code>
    /// The filename without extension is blank, which is not a valid property name
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _dot_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._dot_txt, EmbeddedResource.ResourceName._dot_txt, "_dot_txt");
            var value = EmbeddedResource.BackingField._dot_txt ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._dot_txt);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._dot_txt, "_dot_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: _txt.txt</summary>
    /// <value>
    /// <code>
    /// Using the full filename can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._txt, EmbeddedResource.ResourceName._txt, "_txt");
            var value = EmbeddedResource.BackingField._txt ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._txt);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._txt, "_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 😂.txt</summary>
    /// <value>
    /// <code>
    /// Emoji are not valid in property names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _u1F602_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._u1F602_, EmbeddedResource.ResourceName._u1F602_, "_u1F602_");
            var value = EmbeddedResource.BackingField._u1F602_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._u1F602_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._u1F602_, "_u1F602_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 1(@#$)[.,] <:'|>.txt</summary>
    /// <value>
    /// <code>
    /// special characters in file names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, EmbeddedResource.ResourceName._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, "_1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_");
            var value = EmbeddedResource.BackingField._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, "_1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: &amp;.txt</summary>
    /// <value>
    /// <code>
    /// special characters in file names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _amp_amp_semi_
    {
        get
        {
            ReadEmbeddedResourceValue(ref EmbeddedResource.BackingField._amp_amp_semi_, EmbeddedResource.ResourceName._amp_amp_semi_, "_amp_amp_semi_");
            var value = EmbeddedResource.BackingField._amp_amp_semi_ ??= EmbeddedResource.Read(EmbeddedResource.ResourceName._amp_amp_semi_);
            AlterEmbeddedResourceReturnValue(ref value, EmbeddedResource.ResourceName._amp_amp_semi_, "_amp_amp_semi_");
            return value;
        }
    }
}
