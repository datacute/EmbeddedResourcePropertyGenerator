//HintName: Queries.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

file static class ReadingMethods
{
    public static string ReadEmbeddedResource(string resourceName)
    {
        return global::Datacute.EmbeddedResourcePropertyGenerator.EmbeddedResourceReader.Read(typeof(Queries), resourceName);
    }
}
file static class BackingFields
{
    public static string? _1example_open_1_close_;
    public static string? _1example_lt_1_gt_;
    public static string? Test;
    public static string? Test_;
    public static string? Queries_dot_txt;
    public static string? Queries_txt;
    public static string? _dot_txt;
    public static string? _txt;
    public static string? _u1F602_;
    public static string? _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_;
    public static string? _amp_amp_semi_;
}
file static class ResourceNames
{
    public const string _1example_open_1_close_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1example(1).txt";
    public const string _1example_lt_1_gt_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1example<1>.txt";
    public const string Test = "EmbeddedResourcePropertyGenerator.Tests.Queries.test.txt";
    public const string Test_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.Test.txt";
    public const string Queries_dot_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries.Queries.txt";
    public const string Queries_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries.Queries_txt.txt";
    public const string _dot_txt = "EmbeddedResourcePropertyGenerator.Tests.Queries..txt";
    public const string _txt = "EmbeddedResourcePropertyGenerator.Tests.Queries._txt.txt";
    public const string _u1F602_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.😂.txt";
    public const string _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.1(@#$)[.,] <:'|>.txt";
    public const string _amp_amp_semi_ = "EmbeddedResourcePropertyGenerator.Tests.Queries.&amp;.txt";
}
/// <summary>
/// This class's properties are generated from project files meeting the criteria:
/// <list type="bullet">
/// <item>
/// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>
/// </item>
/// <item>
/// <description>they are in the project folder <c>Queries</c></description>
/// </item>
/// <item>
/// <description>they have the extension <c>.txt</c></description>
/// </item>
/// </list>
/// </summary>
public static partial class Queries
{
    static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);
    static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);

    /// <summary>Text value of the Embedded Resource: 1example(1).txt</summary>
    /// <value>
    /// <code>
    /// Property names cannot start with a number nor contain special characters
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1example_open_1_close_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._1example_open_1_close_, ResourceNames._1example_open_1_close_, "_1example_open_1_close_");
            var value = BackingFields._1example_open_1_close_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._1example_open_1_close_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._1example_open_1_close_, "_1example_open_1_close_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 1example<1>.txt</summary>
    /// <value>
    /// <code>
    /// Replacing special characters with underscores can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1example_lt_1_gt_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._1example_lt_1_gt_, ResourceNames._1example_lt_1_gt_, "_1example_lt_1_gt_");
            var value = BackingFields._1example_lt_1_gt_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._1example_lt_1_gt_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._1example_lt_1_gt_, "_1example_lt_1_gt_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: test.txt</summary>
    /// <value>
    /// <code>
    /// Property names are camel-cased, so this should be Test
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Test
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields.Test, ResourceNames.Test, "Test");
            var value = BackingFields.Test ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.Test);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames.Test, "Test");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Test.txt</summary>
    /// <value>
    /// <code>
    /// Upper-casing the first letter can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Test_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields.Test_, ResourceNames.Test_, "Test_");
            var value = BackingFields.Test_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.Test_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames.Test_, "Test_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Queries.txt</summary>
    /// <value>
    /// <code>
    /// Member names cannot be the same as their enclosing type
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Queries_dot_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields.Queries_dot_txt, ResourceNames.Queries_dot_txt, "Queries_dot_txt");
            var value = BackingFields.Queries_dot_txt ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.Queries_dot_txt);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames.Queries_dot_txt, "Queries_dot_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: Queries_txt.txt</summary>
    /// <value>
    /// <code>
    /// Using the full filename can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string Queries_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields.Queries_txt, ResourceNames.Queries_txt, "Queries_txt");
            var value = BackingFields.Queries_txt ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.Queries_txt);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames.Queries_txt, "Queries_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: .txt</summary>
    /// <value>
    /// <code>
    /// The filename without extension is blank, which is not a valid property name
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _dot_txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._dot_txt, ResourceNames._dot_txt, "_dot_txt");
            var value = BackingFields._dot_txt ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._dot_txt);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._dot_txt, "_dot_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: _txt.txt</summary>
    /// <value>
    /// <code>
    /// Using the full filename can cause name collisions
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _txt
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._txt, ResourceNames._txt, "_txt");
            var value = BackingFields._txt ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._txt);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._txt, "_txt");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 😂.txt</summary>
    /// <value>
    /// <code>
    /// Emoji are not valid in property names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _u1F602_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._u1F602_, ResourceNames._u1F602_, "_u1F602_");
            var value = BackingFields._u1F602_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._u1F602_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._u1F602_, "_u1F602_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: 1(@#$)[.,] <:'|>.txt</summary>
    /// <value>
    /// <code>
    /// special characters in file names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, ResourceNames._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, "_1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_");
            var value = BackingFields._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_, "_1_open_at_hash_dollar_close_start_dot_comma_end_space_lt_colon_apos_pipe_gt_");
            return value;
        }
    }

    /// <summary>Text value of the Embedded Resource: &amp;.txt</summary>
    /// <value>
    /// <code>
    /// special characters in file names
    /// </code>
    /// </value>
    /// <remarks>
    /// The value is read from the embedded resource on first access.
    /// </remarks>
    public static string _amp_amp_semi_
    {
        get
        {
            ReadEmbeddedResourceValue(ref BackingFields._amp_amp_semi_, ResourceNames._amp_amp_semi_, "_amp_amp_semi_");
            var value = BackingFields._amp_amp_semi_ ??= ReadingMethods.ReadEmbeddedResource(ResourceNames._amp_amp_semi_);
            AlterEmbeddedResourceReturnValue(ref value, ResourceNames._amp_amp_semi_, "_amp_amp_semi_");
            return value;
        }
    }
}
