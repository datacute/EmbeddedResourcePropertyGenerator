using Datacute.EmbeddedResourcePropertyGenerator;
using FluentAssertions;
using FluentAssertions.Execution;
using Microsoft.CodeAnalysis;

namespace EmbeddedResourcePropertyGenerator.Tests;

public class GeneratorTests
{
    [Fact]
    public void CanGenerate()
    {
        const string input = /* language=c# */
            """
            using Datacute.EmbeddedResourcePropertyGenerator;
            namespace EmbeddedResourcePropertyGenerator.Tests
            {
                [EmbeddedResourceProperties]
                public static partial class Queries;
            }
            """;
        
        // Create a list to hold all additional texts
        var additionalTexts = new List<AdditionalText>
        {
            new InMemoryAdditionalText(
                @"E:\EmbeddedResourcePropertyGenerator.Tests\Queries\example.txt", 
                "Example text content"),
            new InMemoryAdditionalText(
                @"E:\EmbeddedResourcePropertyGenerator.Tests\Queries\example2.file", 
                "Example text content with the wrong extension - should not be included"),
            new InMemoryAdditionalText(
                @"E:\EmbeddedResourcePropertyGenerator.Tests\WrongFolder\example3.txt", 
                "Example text content in the wrong folder - should not be included")
        };
        
        const string expected = /* language=c# */
            """
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by the Datacute.EmbeddedResourcePropertyGenerator.
            // </auto-generated>
            //------------------------------------------------------------------------------
            
            #nullable enable
            
            namespace EmbeddedResourcePropertyGenerator.Tests;
            file static class ReadingMethods
            {
                public static string ReadEmbeddedResource(string resourceName)
                {
                    return global::Datacute.EmbeddedResourcePropertyGenerator.EmbeddedResourceReader.Read(typeof(Queries), resourceName);
                }
            }
            file static class BackingFields
            {
                public static string? Example;
            }
            file static class ResourceNames
            {
                public const string Example = "EmbeddedResourcePropertyGenerator.Tests.Queries.example.txt";
            }
            /// <summary>
            /// This class's properties are generated from project files meeting the criteria:
            /// <list type="bullet">
            /// <item>
            /// <description>they are both an <c>EmbeddedResource</c> and an <c>AdditionalFile</c></description>
            /// </item>
            /// <item>
            /// <description>they are in the project folder <c>Queries</c></description>
            /// </item>
            /// <item>
            /// <description>they have the extension <c>.txt</c></description>
            /// </item>
            /// </list>
            /// </summary>
            public static partial class Queries
            {
                static partial void ReadEmbeddedResourceValue(ref string? backingField, string resourceName, string propertyName);
                static partial void AlterEmbeddedResourceReturnValue(ref string value, string resourceName, string propertyName);
        
                /// <summary>Text value of the Embedded Resource: example.txt</summary>
                /// <value>
                /// <code>
                /// Example text content
                /// </code>
                /// </value>
                /// <remarks>
                /// The value is read from the embedded resource on first access.
                /// </remarks>
                public static string Example
                {
                    get
                    {
                        ReadEmbeddedResourceValue(ref BackingFields.Example, ResourceNames.Example, "Example");
                        var value = BackingFields.Example ??= ReadingMethods.ReadEmbeddedResource(ResourceNames.Example);
                        AlterEmbeddedResourceReturnValue(ref value, ResourceNames.Example, "Example");
                        return value;
                    }
                }
            }
            
            """;

        // run the generator, passing in the inputs and the tracking names
        var (diagnostics, output)
            = TestHelper.GetGeneratedOutput<Generator>(additionalTexts, input);

        // Assert the output
        using var s = new AssertionScope();
        diagnostics.Should().BeEmpty();
        output.Should().Be(expected);
    }
}